use ark_bn254::{Fq2, Fr, G2Affine};
use ark_ff::MontFp;

pub const BYTES_PER_FIELD_ELEMENT: usize = 32;
pub const SIZE_OF_G1_AFFINE_COMPRESSED: usize = 32; // in bytes

/// Ref: https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/polynomial-commitments.md#blob
pub const FIAT_SHAMIR_PROTOCOL_DOMAIN: &[u8] = b"EIGENDA_FSBLOBVERIFY_V1_"; // Adapted from 4844

/// Ref: https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/polynomial-commitments.md#blob
pub const RANDOM_CHALLENGE_KZG_BATCH_DOMAIN: &[u8] = b"EIGENDA_RCKZGBATCH___V1_"; // Adapted from 4844

/// These are the primitive 2^nth roots of unity. `2^28`
/// is the largest power of two that divides `r - 1`, therefore there are no primitive
/// roots of unity for higher powers of 2 in Fr.). Given a blob
/// length, we calculate the number of field elements needed and then get the
/// value of the actual power of 2 which is less than or equal to 28. We then use
/// this value to get the primitive root of unity from the array below to expand
/// to the roots of unity needed. The number of expanded roots elements will be the
/// same as the power of 2 i.e if `8th` power of 2 was calculated then we get `2^8 = 256`
/// expanded roots of unity.   
pub const PRIMITIVE_ROOTS_OF_UNITY: [Fr; 29] = [
    MontFp!("1"),
    MontFp!("21888242871839275222246405745257275088548364400416034343698204186575808495616"),
    MontFp!("21888242871839275217838484774961031246007050428528088939761107053157389710902"),
    MontFp!("19540430494807482326159819597004422086093766032135589407132600596362845576832"),
    MontFp!("14940766826517323942636479241147756311199852622225275649687664389641784935947"),
    MontFp!("4419234939496763621076330863786513495701855246241724391626358375488475697872"),
    MontFp!("9088801421649573101014283686030284801466796108869023335878462724291607593530"),
    MontFp!("10359452186428527605436343203440067497552205259388878191021578220384701716497"),
    MontFp!("3478517300119284901893091970156912948790432420133812234316178878452092729974"),
    MontFp!("6837567842312086091520287814181175430087169027974246751610506942214842701774"),
    MontFp!("3161067157621608152362653341354432744960400845131437947728257924963983317266"),
    MontFp!("1120550406532664055539694724667294622065367841900378087843176726913374367458"),
    MontFp!("4158865282786404163413953114870269622875596290766033564087307867933865333818"),
    MontFp!("197302210312744933010843010704445784068657690384188106020011018676818793232"),
    MontFp!("20619701001583904760601357484951574588621083236087856586626117568842480512645"),
    MontFp!("20402931748843538985151001264530049874871572933694634836567070693966133783803"),
    MontFp!("421743594562400382753388642386256516545992082196004333756405989743524594615"),
    MontFp!("12650941915662020058015862023665998998969191525479888727406889100124684769509"),
    MontFp!("11699596668367776675346610687704220591435078791727316319397053191800576917728"),
    MontFp!("15549849457946371566896172786938980432421851627449396898353380550861104573629"),
    MontFp!("17220337697351015657950521176323262483320249231368149235373741788599650842711"),
    MontFp!("13536764371732269273912573961853310557438878140379554347802702086337840854307"),
    MontFp!("12143866164239048021030917283424216263377309185099704096317235600302831912062"),
    MontFp!("934650972362265999028062457054462628285482693704334323590406443310927365533"),
    MontFp!("5709868443893258075976348696661355716898495876243883251619397131511003808859"),
    MontFp!("19200870435978225707111062059747084165650991997241425080699860725083300967194"),
    MontFp!("7419588552507395652481651088034484897579724952953562618697845598160172257810"),
    MontFp!("2082940218526944230311718225077035922214683169814847712455127909555749686340"),
    MontFp!("19103219067921713944291392827692070036145651957329286315305642004821462161904"),
];

pub const G2_TAU_FOR_TEST_SRS_3000: G2Affine = G2Affine::new_unchecked(
    Fq2::new(
        MontFp!("7912312892787135728292535536655271843828059318189722219035249994421084560563"),
        MontFp!("21039730876973405969844107393779063362038454413254731404052240341412356318284"),
    ),
    Fq2::new(
        MontFp!("18697407556011630376420900106252341752488547575648825575049647403852275261247"),
        MontFp!("7586489485579523767759120334904353546627445333297951253230866312564920951171"),
    ),
);

pub const G2_TAU_FOR_MAINNET_SRS: G2Affine = G2Affine::new_unchecked(
    Fq2::new(
        MontFp!("19394299006376106554626551996044114846855237028623244664226757033024550999552"),
        MontFp!("10478571113809844268398751534081669357808742555529167819607714577862447855483"),
    ),
    Fq2::new(
        MontFp!("9205262336805673656533560220225620941045451042642528799409071118332922267006"),
        MontFp!("10552783866161062341197740743287753408530108186218052255509661543860392060676"),
    ),
);

// This is the G2 Tau for the MAINNET SRS points.
pub const MAINNET_SRS_G1_SIZE: usize = 131072;
