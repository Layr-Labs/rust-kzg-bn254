use std::{
    fs::File,
    io::{BufRead, BufReader, Read},
};

use ark_bn254::{Fq, Fq2, Fr, G1Affine, G1Projective, G2Affine, G2Projective};
use ark_ff::{PrimeField, UniformRand};
use ark_std::{str::FromStr, One};
use rust_kzg_bn254_primitives::{
    consts::{BYTES_PER_FIELD_ELEMENT, PRIMITIVE_ROOTS_OF_UNITY, SIZE_OF_G1_AFFINE_COMPRESSED},
    helpers::{
        blob_to_polynomial, get_num_element, is_on_curve_g1, is_on_curve_g2, is_zeroed,
        pad_payload, remove_internal_padding, set_bytes_canonical, set_bytes_canonical_manual,
        to_byte_array, to_fr_array,
    },
};

const GETTYSBURG_ADDRESS_BYTES: &[u8] = "Fourscore and seven years ago our fathers brought forth, on this continent, a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal. Now we are engaged in a great civil war, testing whether that nation, or any nation so conceived, and so dedicated, can long endure. We are met on a great battle-field of that war. We have come to dedicate a portion of that field, as a final resting-place for those who here gave their lives, that that nation might live. It is altogether fitting and proper that we should do this. But, in a larger sense, we cannot dedicate, we cannot consecrate—we cannot hallow—this ground. The brave men, living and dead, who struggled here, have consecrated it far above our poor power to add or detract. The world will little note, nor long remember what we say here, but it can never forget what they did here. It is for us the living, rather, to be dedicated here to the unfinished work which they who fought here have thus far so nobly advanced. It is rather for us to be here dedicated to the great task remaining before us—that from these honored dead we take increased devotion to that cause for which they here gave the last full measure of devotion—that we here highly resolve that these dead shall not have died in vain—that this nation, under God, shall have a new birth of freedom, and that government of the people, by the people, for the people, shall not perish from the earth.".as_bytes();

#[test]
fn test_g1_is_on_curve() {
    use rand::thread_rng;

    let rng = &mut thread_rng();
    for _ in 0..1000 {
        let point = G1Affine::rand(rng);
        assert!(is_on_curve_g1(&G1Projective::from(point)));
        let mut not_on_curve = point;
        not_on_curve.x += Fq::one();
        assert!(!is_on_curve_g1(&G1Projective::from(not_on_curve)));
    }
}

#[test]
fn test_g2_is_on_curve() {
    use rand::thread_rng;

    let rng = &mut thread_rng();
    for _ in 0..1000 {
        let point = G2Affine::rand(rng);
        assert!(is_on_curve_g2(&G2Projective::from(point)));
        let mut not_on_curve = point;
        not_on_curve.x += Fq2::one();
        assert!(!is_on_curve_g2(&G2Projective::from(not_on_curve)));
    }
}
// Loads data from files. This data was generated by gnark and is DA compatible.
// Tests deserialization of data and equivalence.
#[test]
fn test_blob_to_polynomial() {
    let file = File::open("tests/test-files/blobs.txt").unwrap();
    let mut reader = BufReader::new(file);
    let mut buffer = [0u8; SIZE_OF_G1_AFFINE_COMPRESSED];
    let mut read_fr_from_bytes: Vec<Fr> = vec![];
    let mut fr_from_str_vec: Vec<Fr> = vec![];

    // Loop to read the file 32 bytes at a time
    loop {
        match reader.read(&mut buffer[..]) {
            Ok(0) => {
                // No more data to read
                break;
            },
            Ok(n) => {
                // Process the chunk of data just read
                read_fr_from_bytes.push(Fr::from_be_bytes_mod_order(&buffer[..n]))
            },
            Err(e) => panic!("{}", e),
        }
    }

    let file2 = File::open("tests/test-files/blobs-from-fr.txt").unwrap();
    let reader2 = BufReader::new(file2);
    for (i, line) in reader2.lines().enumerate() {
        let line = line.unwrap();
        let trimmed_line = line.trim_end(); // Trim whitespace from the end
        let the_strings_str: Vec<&str> = trimmed_line.split(',').collect(); // Split the line on commas
        let fr_from_str = Fr::from_str(the_strings_str[0]).expect("should be fine");
        fr_from_str_vec.push(fr_from_str);
        assert_eq!(fr_from_str, read_fr_from_bytes[i]);
    }

    let mut file3 = File::open("tests/test-files/blobs.txt").unwrap();
    let mut contents = Vec::new();
    file3.read_to_end(&mut contents).unwrap();

    assert_eq!(fr_from_str_vec, blob_to_polynomial(&contents));
}

#[test]
fn test_to_fr_array() {
    let converted = pad_payload(
        vec![
            42, 212, 238, 227, 192, 237, 178, 128, 19, 108, 50, 204, 87, 81, 63, 120, 232, 27, 116,
            108, 74, 168, 109, 84, 89, 9, 6, 233, 144, 200, 125, 40,
        ]
        .as_slice(),
    );
    let data_fr = to_fr_array(&converted);
    let result = to_byte_array(&data_fr, converted.len().try_into().unwrap());
    assert_eq!(converted, result, "should be deserialized properly");

    let ga_converted = pad_payload(GETTYSBURG_ADDRESS_BYTES);
    let ga_converted_fr = to_fr_array(&ga_converted);
    assert_eq!(
        to_byte_array(&ga_converted_fr, ga_converted.len().try_into().unwrap()),
        ga_converted
    );
}

#[test]
fn test_how_to_read_bytes() {
    let the_bytes = vec![
        31, 94, 220, 111, 30, 251, 22, 93, 69, 166, 84, 121, 141, 75, 170, 165, 14, 59, 77, 36, 24,
        41, 19, 174, 245, 17, 10, 21, 88, 14, 186, 173,
    ];
    let data = Fr::from_be_bytes_mod_order(&the_bytes);
    println!("{:?}", data.0);
}

#[test]
fn test_get_num_element() {
    let num_elements = get_num_element(1000, BYTES_PER_FIELD_ELEMENT);
    assert_eq!(num_elements, 32_usize, "needs to be equal");
}

#[test]
fn test_set_canonical_bytes() {
    let data: Vec<u8> = vec![
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31,
    ];
    let fr_element = set_bytes_canonical_manual(&data);
    assert_eq!(fr_element, set_bytes_canonical(&data), "needs to be equal");
}

#[test]
fn test_convert_by_padding_empty_byte() {
    let mut padded_data = pad_payload("hi".as_bytes());
    assert_eq!(
        padded_data,
        vec![
            0, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0
        ],
        "testing adding padding"
    );

    let mut unpadded_data = remove_internal_padding(&padded_data).unwrap();
    assert_eq!(
        unpadded_data,
        vec![
            104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0
        ],
        "testing removing padding"
    );

    padded_data = pad_payload(GETTYSBURG_ADDRESS_BYTES);
    unpadded_data = remove_internal_padding(&padded_data).unwrap();

    assert_eq!(
        GETTYSBURG_ADDRESS_BYTES.len() > (unpadded_data.len() - 32),
        true
    );
    assert_eq!(GETTYSBURG_ADDRESS_BYTES.len() <= unpadded_data.len(), true);
}

#[test]
fn test_is_zeroed_all_zeroes() {
    // Case where the first byte and the buffer are all zeroes
    let first_byte = 0;
    let buf = vec![0, 0, 0, 0, 0];
    assert!(is_zeroed(first_byte, buf), "Expected true for all zeroes");
}

#[test]
fn test_is_zeroed_first_byte_non_zero() {
    // Case where the first byte is non-zero
    let first_byte = 1;
    let buf = vec![0, 0, 0, 0, 0];
    assert!(
        !is_zeroed(first_byte, buf),
        "Expected false when the first byte is non-zero"
    );
}

#[test]
fn test_is_zeroed_buffer_non_zero() {
    // Case where the buffer contains non-zero elements
    let first_byte = 0;
    let buf = vec![0, 0, 1, 0, 0];
    assert!(
        !is_zeroed(first_byte, buf),
        "Expected false when the buffer contains non-zero elements"
    );
}

#[test]
fn test_is_zeroed_first_byte_and_buffer_non_zero() {
    // Case where both the first byte and buffer contain non-zero elements
    let first_byte = 1;
    let buf = vec![0, 1, 0, 0, 0];
    assert!(
        !is_zeroed(first_byte, buf),
        "Expected false when both the first byte and buffer contain non-zero elements"
    );
}

#[test]
fn test_is_zeroed_empty_buffer() {
    // Case where the buffer is empty but the first byte is zero
    let first_byte = 0;
    let buf: Vec<u8> = Vec::new();
    assert!(
        is_zeroed(first_byte, buf),
        "Expected true for an empty buffer with a zero first byte"
    );
}

#[test]
fn test_is_zeroed_empty_buffer_non_zero_first_byte() {
    // Case where the buffer is empty and the first byte is non-zero
    let first_byte = 1;
    let buf: Vec<u8> = Vec::new();
    assert!(
        !is_zeroed(first_byte, buf),
        "Expected false for an empty buffer with a non-zero first byte"
    );
}

#[test]
fn test_primitive_roots_from_bigint_to_fr() {
    let data: [&str; 29] = [
        "1",
        "21888242871839275222246405745257275088548364400416034343698204186575808495616",
        "21888242871839275217838484774961031246007050428528088939761107053157389710902",
        "19540430494807482326159819597004422086093766032135589407132600596362845576832",
        "14940766826517323942636479241147756311199852622225275649687664389641784935947",
        "4419234939496763621076330863786513495701855246241724391626358375488475697872",
        "9088801421649573101014283686030284801466796108869023335878462724291607593530",
        "10359452186428527605436343203440067497552205259388878191021578220384701716497",
        "3478517300119284901893091970156912948790432420133812234316178878452092729974",
        "6837567842312086091520287814181175430087169027974246751610506942214842701774",
        "3161067157621608152362653341354432744960400845131437947728257924963983317266",
        "1120550406532664055539694724667294622065367841900378087843176726913374367458",
        "4158865282786404163413953114870269622875596290766033564087307867933865333818",
        "197302210312744933010843010704445784068657690384188106020011018676818793232",
        "20619701001583904760601357484951574588621083236087856586626117568842480512645",
        "20402931748843538985151001264530049874871572933694634836567070693966133783803",
        "421743594562400382753388642386256516545992082196004333756405989743524594615",
        "12650941915662020058015862023665998998969191525479888727406889100124684769509",
        "11699596668367776675346610687704220591435078791727316319397053191800576917728",
        "15549849457946371566896172786938980432421851627449396898353380550861104573629",
        "17220337697351015657950521176323262483320249231368149235373741788599650842711",
        "13536764371732269273912573961853310557438878140379554347802702086337840854307",
        "12143866164239048021030917283424216263377309185099704096317235600302831912062",
        "934650972362265999028062457054462628285482693704334323590406443310927365533",
        "5709868443893258075976348696661355716898495876243883251619397131511003808859",
        "19200870435978225707111062059747084165650991997241425080699860725083300967194",
        "7419588552507395652481651088034484897579724952953562618697845598160172257810",
        "2082940218526944230311718225077035922214683169814847712455127909555749686340",
        "19103219067921713944291392827692070036145651957329286315305642004821462161904",
    ];
    let fr_s = data
        .iter()
        .map(|s: &&str| Fr::from_str(*s).unwrap())
        .collect::<Vec<_>>();

    for i in 0..PRIMITIVE_ROOTS_OF_UNITY.len() {
        let root_of_unity_at_index = PRIMITIVE_ROOTS_OF_UNITY[i];
        assert_eq!(root_of_unity_at_index, fr_s[i]);
    }
}
